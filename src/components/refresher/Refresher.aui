<script>
// http://www.mescroll.com/api.html
import MeScroll from 'mescroll.js'
import 'mescroll.js/mescroll.min.css'
import { setTimeout } from 'timers';
let REFRESH_ID = 0;
function setId($refresh){
    let id = $refresh.attr('id');
    if(!id){
        id = '__REFRESH_ID__' + REFRESH_ID++;
        $refresh.attr('id', id);
    }
    return id;
}

export default class Refresher{
    static get tag(){
        return 'refresher';
    }

    static init(el, options){
        const comp = ($(el)[0]||{}).component;
        comp && comp.init(options);
    }

    init(options){
        const $el = $(this.$el);
        $el.removeAttr('delay');
        this.created(options);
    }

    bindEvent(){
        const self = this, $refresh = $(this.$el);
        // 初始化组件
        $refresh.off('init').on('init', function(e, options){
            self.init(options);
        });

        // 主动触发下拉刷新
        $refresh.off('downscroll').on('downscroll', function(e){
            self.refresher&&self.refresher.triggerDownScroll();
        });
        // 主动触发上拉刷新
        $refresh.off('upscroll').on('upscroll', function(e){
            self.refresher&&self.refresher.triggerUpScroll();
        });
    }

    created(options){
        if(this.refresher) return;
        const $refresh = $(this.$el);
        if($refresh.hasAttr('delay')){
            return;
        }
        $refresh.addClass('mescroll');
        const refreshId = setId($refresh), refreshIdSelector = `#${refreshId}`;
        const _this = this;
        const auto = $refresh.attr('auto');
        let downFlag = auto==='auto'?true:false, upFlag = downFlag;
        const refresher = this.refresher = new MeScroll(this.$el, Object.assign({
            container: refreshIdSelector,
            isScrollBar: false,
            down: {
                callback: function() {
                    // 下拉事件
                    $refresh.trigger('pulldown', [
                        {
                            refresh: function(){
                                _this.refreshDown();
                            },
                            end: function(){
                                _this.refreshUpEnd();
                            }
                        },
                        refresher
                    ]);
                }
            },
            up: {
                callback: function() {
                    // 上拉事件
                    $refresh.trigger('pullup', [
                        {
                            refresh: function(){
                                _this.refreshUp();
                            },
                            end: function(){
                                _this.refreshUpEnd();
                            }
                        },
                        refresher
                    ]);
                },
                auto: upFlag
            }
        }, options || {}));

        this.bindEvent();
    }

    detached(){
        this.refresher && this.refresher.destroy();
    }

    refreshDown(){
        this.refresher && this.refresher.endSuccess();
        this.refresher && this.refresher.lockUpScroll(false);
    }

    refreshUp(){
        this.refresher && this.refresher.endSuccess();
    }

    refreshUpEnd(){
        this.refresher && this.refresher.endSuccess();
        $(this.$el).children('.mescroll-upwarp').css({visibility: 'hidden'});
        this.refresher && this.refresher.lockUpScroll(true);
    }

    scrollTo(y, duration){
        this.refresher && this.refresher.scrollTo(y, duration);
    }

    getPosition(){
        return this.refresher && this.refresher.getPosition();
    }
}

</script>

<style>
.mescroll{
    display: block;
    width: 100%;
    height: auto;
}

</style>
